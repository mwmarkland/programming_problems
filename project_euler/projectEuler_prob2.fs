(* Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be
 *
 * 1,2,3,5,8,13,21,34,55,89
 *
 * Find the sum of all the even-valued terms in the sequence which do not
 * exceed 4 million.
 *)

#light;;

(* Simple recursive fibonacci implementation. *)
(* n is the index into the sequence *)
let rec fib n = 
  match n with
  | 0 -> 1
  | 1 -> 1
  | _ -> fib (n-2) + fib (n-1);;

(* Create a list consisting of the fibonacci numbers smaller than some
 * max value. 
 *)

(* Key idea, don't try to create a loop that iterates over indexes,
 * indexes simply * grow until the limit is reached.  
*)

let rec createFibSeq n max lst = 
  let value = fib n
  if value < max then value :: createFibSeq (n+1) (max) [] else lst;;

(* Even checker *)
let even n = if ( (n % 2) = 0) n else 0;;

(* The power of fold and map. *)
let euler2 = List.fold (+) 0 (List.map even (createFibSeq 0 4000000 [])


